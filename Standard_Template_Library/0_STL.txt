C++ Standard Template Library(STL) is a powerful library that provides several components to help with data structures, algorithms, and iterators. Here’s a detailed list of all the STL components and their uses:

### **1. Containers**
Containers are used to store collections of objects and data.

#### **1.1 Sequence Containers** (Linear storage)
- **`vector`** → Dynamic array with fast access and insertion/removal at the end.
- **`deque`** → Double-ended queue with fast insertions and deletions at both ends.
- **`list`** → Doubly linked list with fast insertion and deletion anywhere.
- **`forward_list`** → Singly linked list (more memory efficient than `list`).
- **`array`** → Fixed-size array with better performance than `vector`.
- **`stack`** → LIFO (Last In, First Out) container adapter.

#### **1.2 Associative Containers** (Ordered storage)
- **`set`** → Stores unique elements in sorted order.
- **`multiset`** → Stores duplicate elements in sorted order.
- **`map`** → Stores key-value pairs with unique keys, sorted by key.
- **`multimap`** → Stores key-value pairs, allowing duplicate keys.

#### **1.3 Unordered Associative Containers** (Unordered storage using hashing)
- **`unordered_set`** → Stores unique elements in no particular order (fast lookups).
- **`unordered_multiset`** → Stores duplicate elements in no particular order.
- **`unordered_map`** → Stores key-value pairs with unique keys, in no particular order.
- **`unordered_multimap`** → Stores key-value pairs, allowing duplicate keys.

#### **1.4 Container Adapters** (Restricted interface)
- **`stack`** → Provides LIFO stack functionality.
- **`queue`** → Provides FIFO queue functionality.
- **`priority_queue`** → Provides a max-heap or min-heap structure.

---

### **2. Iterators**
Iterators provide a way to traverse through elements in containers.

- **`begin()` & `end()`** → Used to get iterators pointing to the beginning and end.
- **`rbegin()` & `rend()`** → Reverse iterators.
- **`cbegin()` & `cend()`** → Constant iterators.
- **`crbegin()` & `crend()`** → Constant reverse iterators.
- **Types of Iterators:**
  - **Input Iterator** → Read-only, single-pass.
  - **Output Iterator** → Write-only, single-pass.
  - **Forward Iterator** → Read and write, multiple passes.
  - **Bidirectional Iterator** → Can move both forward and backward.
  - **Random Access Iterator** → Can move anywhere (like pointers in arrays).

---

### **3. Algorithms**
STL provides a wide range of algorithms that operate on containers.

#### **3.1 Sorting & Searching**
- **`sort()`** → Sorts a range using the intro sort algorithm.
- **`partial_sort()`** → Sorts only a part of a range.
- **`nth_element()`** → Finds the nth largest element.
- **`binary_search()`** → Checks if an element exists in a sorted range.
- **`lower_bound()` & `upper_bound()`** → Finds elements in sorted ranges.

#### **3.2 Numeric Operations**
- **`accumulate()`** → Computes sum or other operations over a range.
- **`inner_product()`** → Computes inner product of two ranges.
- **`iota()`** → Fills range with increasing values.

#### **3.3 Modifying Sequences**
- **`copy()` & `copy_if()`** → Copies elements to another range.
- **`fill()`** → Fills a range with a specific value.
- **`replace()` & `replace_if()`** → Replaces elements with another value.
- **`reverse()`** → Reverses a range.
- **`unique()`** → Removes consecutive duplicate elements.

#### **3.4 Permutations & Combinations**
- **`next_permutation()`** → Generates next lexicographic permutation.
- **`prev_permutation()`** → Generates previous lexicographic permutation.

#### **3.5 Set Operations**
- **`merge()`** → Merges two sorted ranges.
- **`set_union()`** → Computes union of two sets.
- **`set_intersection()`** → Computes intersection of two sets.
- **`set_difference()`** → Computes set difference.
- **`set_symmetric_difference()`** → Computes symmetric difference.

#### **3.6 Heap Operations**
- **`make_heap()`** → Converts range into a heap.
- **`push_heap()` & `pop_heap()`** → Pushes or pops element in a heap.
- **`sort_heap()`** → Turns a heap into a sorted range.

---

### **4. Functors (Function Objects)**
Functors are objects that act like functions.

- **`greater<>`** → Defines a descending order comparison.
- **`less<>`** → Defines an ascending order comparison.
- **`greater_equal<>`** → Defines `>=` comparison.
- **`less_equal<>`** → Defines `<=` comparison.

---

### **5. Utility Components**
STL provides several utility classes and functions.

- **`pair<>`** → Holds two related values together.
- **`tuple<>`** → Holds multiple values of different types.
- **`make_pair()`** → Creates a `pair` object.
- **`tie()`** → Unpacks tuple or pair values.
- **`swap()`** → Swaps two values.
- **`move()`** → Moves data instead of copying.

---

### **6. String Library**
Used for string manipulations.

- **`string`** → Dynamic character array with built-in functions.
- **`wstring`** → Wide character string.
- **`to_string()`** → Converts number to string.
- **`stoi(), stol(), stod()`** → Converts string to integer/float.

---

### **7. Chrono Library (Time Utilities)**
Used for time-based operations.

- **`chrono::duration`** → Represents time duration.
- **`chrono::system_clock`** → Represents system-wide clock.
- **`chrono::high_resolution_clock`** → High-precision clock.

---

### **8. Random Number Library**
Generates random numbers.

- **`random_device`** → Non-deterministic random number generator.
- **`mt19937`** → Mersenne Twister engine.
- **`uniform_int_distribution<>`** → Generates numbers in a given range.

---

### **9. Memory Management**
STL provides smart pointers to manage memory.

- **`unique_ptr<>`** → Single ownership smart pointer.
- **`shared_ptr<>`** → Shared ownership smart pointer.
- **`weak_ptr<>`** → Non-owning reference to `shared_ptr`.
- **`make_shared<>`** → Creates `shared_ptr`.

---

## **Conclusion**
C++ STL provides a powerful set of tools for managing data, performing algorithmic operations, and optimizing performance. Mastering STL allows developers to write efficient, clean, and maintainable code with minimal effort.

